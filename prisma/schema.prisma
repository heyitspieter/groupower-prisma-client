// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum APPLICATION_STATUS {
  saved
  pending
  approved
  declined
}

enum ROLE {
  USER
  ADMIN
  SUPER_ADMIN
  AGENT
  INSTALLER
  COLLABORATOR
}

enum ACCOUNT_STATUS {
  suspended
  active
  pending
}

enum WORK_STATUS {
  SELF_EMPLOYED
  EMPLOYEE
}

enum GENDER {
  Male
  Female
}

enum PREFIX {
  Mr
  Mrs
  Miss
  Professor
  Doctor
  Chief
  Pastor
}

enum MARITAL_STATUS {
  Single
  Married
  Widowed
  Divorced
}

enum MOUNT_TYPE {
  ROOF_MOUNT
  FLOOR_MOUNT
}

enum Actions {
  CREATE
  DELETE
  EDIT
  UPDATE
  LIST
  READ
}

enum TwoFactorAuthChannel {
  Email
  SMS
}

enum ChatSessionStatus {
  active
  ended
}

enum MessageStorageType {
  locale
  db
}

enum Collaborator_OrgType {
  financier
  solar_oem
}

type Bank_account {
  number String
  bank   String
  holder String
}

type Location {
  description String
  lat         Float
  lng         Float
}

type Country {
  flag   String
  label  String
  latlng Float[]
  region String
  value  String
}

type EmployerSupervisor {
  firstname     String
  lastname      String
  company_role  String
  middlename    String
  email_address String
  phone_number  String
}

type Employment {
  business_name        String?
  business_address     String?
  work_phone           String?
  business_duration    String?
  business_website     String?
  net_revenue          String?
  business_certificate String?

  employer_name       String?
  employer_address    String?
  employer_supervisor EmployerSupervisor?
  salary_account      Bank_account?
  time_at_employer    String?
  net_income          String?
  proof_of_salary     String?
  job_letter          String?

  employment_status WORK_STATUS?
}

type CompanyInfo {
  company_name          String
  company_role          String
  company_email_address String
  work_phone            String
  company_address       String
  company_website       String
  company_social_handle String
  company_structure     String
  company_description   String
  company_sector        String
  company_owner         String
  country               Country
  city                  String
  state                 String
  zipCode               String
}

type Appliances {
  id    String @db.ObjectId
  name  String
  image String
  count Int
}

type PersonalInfo {
  firstname       String
  lastname        String
  middlename      String
  gender          GENDER
  prefix          PREFIX
  marital_status  MARITAL_STATUS
  num_children    Int?
  email_address   String
  contact_address String
  country         Country
  city            String
  state           String
  zipCode         String
  phone_number    String
}

type HousingInfo {
  beds                String
  building_type       String
  electricity_cost    String
  num_residents       Int
  mount_type          MOUNT_TYPE
  solar_mount_address Location
  appliances          Appliances[]
}

type CompanyExpenses {
  grid_electricity_monthly_cost String
  grid_electricity_daily_usage  String
  power_generation_monthly_cost String
  power_generation_daily_usage  String
  fuel_daily_cost               String
  generator_size                String
}

type CompanySolarRequirements {
  solar_mount_address Location
  mount_type          MOUNT_TYPE
  available_space     String
}

type KYC {
  verified               Boolean
  bvn_number             String
  kyc_verification_media String
}

type Documentations {
  annual_revenue       String
  business_reg_number  String
  business_certificate String
}

type Permission {
  applications Actions[]
  admins       Actions[]
  users        Actions[]
  agents       Actions[]
  messenger    Actions[]
}

type TwoFactorAuth {
  enabled Boolean
  channel TwoFactorAuthChannel
}

type UserAuthConfig {
  two_factor_auth TwoFactorAuth
}

type Settings {
  auth UserAuthConfig
}

type ResetPassword {
  token     String
  expiresIn DateTime
}

type Invites {
  id String? @db.ObjectId
}

type ContactSessions {
  chatId  String            @db.ObjectId
  members String[]          @db.ObjectId
  status  ChatSessionStatus
}

type MessengerAuth {
  loggedIn     Boolean
  lastLoggedIn DateTime?
}

type SolarEquipmentInfo {
  units         Int
  cost_per_unit Int
}

type SolarSystemTariff {
  cost_of_installation Int?
  loan_interest        Int?
}

type SolarEquipments {
  batteries          SolarEquipmentInfo
  charge_controllers SolarEquipmentInfo
  inverter           SolarEquipmentInfo
  panels             SolarEquipmentInfo
  racks              SolarEquipmentInfo?
  mounting_frames    SolarEquipmentInfo?
  cables             SolarEquipmentInfo?
  accessories        SolarEquipmentInfo?
}

type CommunityGeneralInfo {
  community_name                String
  community_address             String
  community_region              String
  community_country             Country
  primary_contact_info          String
  primary_contact_email_address String
  primary_contact_phone_number  String
}

type CommunityDemographicInfo {
  num_residents              String
  industry_types             String
  energy_sources             String
  estimated_households       String
  estimated_businesses       String
  industry_contribution      String
  average_energy_consumption String
}

type CommunityEnergyRequirements {
  primary_challenges    String
  areas_energy_required String
  energy_rate_forecast  String
  solar_plant_size      String
}

type CommunityEconomicInfo {
  averge_household_income   String
  num_active_businesses     String
  active_business_activties String
}

type CommunityInfrastructrueInfo {
  existing_electricity_infrastructure String
  power_grid_connection               String
  grid_connection_reliability         String
  logistics_challenges                String
}

type CommunityEnviromentalInfo {
  enviromental_concerns      String
  carbon_footprint_reduction String
  available_land_space       String
}

type CommunityTechnicalRequirements {
  available_space           String
  solar_mount_location_info String
}

type CommunityRegulatoryPolicy {
  existing_regulations       String
  available_incentives       String
  solar_installation_permits String
}

type CommunityEngagement {
  community_support    String
  community_challenges String
  maintenance_sourcing String
}

type CommunityFiniancialViability {
  ppa_agreement    String
  tariff_agreement String
}

type CommunityProjectTimeline {
  timeline   String
  milestones String
}

type CommunityPartnerships {
  existing_partnerships String
}

type CommunityAdditionalComments {
  additional_information String
  challenges             String
}

type Agent_Profile {
  agent_name                        String
  contact_email                     String
  contact_phone_number              String
  company_registration_no           String?
  business_address                  String?
  sales_experience                  String
  renewable_energy_work_experience  String?
  relevant_skills_expertise         String
  areas_of_operation                String
  open_to_coverage_expansion        String?
  marketing_approach                String
  promotion_channels                String
  existing_customer_network         String?
  leverage_on_existing_network      String
  hear_about_us                     String
  reason_for_joining                String
  open_to_training                  String
  commitment_to_represent           String
  transparency_foster_tactics       String
  technical_support                 String
  agreement_and_terms               String
  additional_information            String?
  specific_expectation_requirements String?
}

type Installer_Profile {
  business_name                       String
  cac_reg_number                      String
  years_of_incorporation              String
  business_street_address             String
  business_city                       String
  business_lga                        String
  business_state                      String
  business_country                    Country
  solar_installation_experience       String
  belong_to_installation_association  String
  number_of_technical_staff           String
  business_owner_fullname             String
  business_owner_mobile_number        String
  business_owner_email                String
  no_of_installations_completed       String
  type_of_solar_system_installed      String
  solar_installation_brand_experience String
  experience_with_grid_installations  String
  relevant_license                    String
  solar_installation_certificate      String
  compliant_with_regulations          String
  expertise_with_system_design        String
  solar_installation_proficiency      String
  mounting_roofing_familiarity        String
  troubleshooting_experience           String
  installation_management_ability     String
  installation_safety_assurance       String
  project_timeline_approach           String
  solar_installer_reference_1           String
  solar_installer_reference_2           String
  successful_installations            String
  installer_tools                     String
  access_to_equipment_transportation  String
  warranty_type                       String
  post_installation_techniques        String
  available_installer_regions         String
  commute_outside_current_area        String
  installer_liability_insurance       String
  current_insurance_coverage          String
  hear_about_us                       String
  reason_for_collaboration            String
  open_to_training                    String
  current_workload_and_availability   String
  upcoming_commitments                String
  additional_information              String?
  specific_expectation_requirements   String?
}

type Collaborator_Profile {
  organization_name                  String
  organization_type                  Collaborator_OrgType
  organization_email                 String?
  organization_phone_number          String
  organization_reg_number            String?
  organization_mission               String
  type_of_collaboration              String
  collaboration_alignment            String
  prior_collaboration                String
  successful_collaboration_highlight String
  organization_capacity              String?
  organization_finiancial_mechanisms String?
  organization_solar_products        String?
  organization_solar_equipment_brand String?
  organization_certifications        String?
  organization_operational_regions   String
  open_to_expansion                  String
  organization_technical_expertise   String
  organization_technical_support     String
  organization_refrences             String
  compliance_ethical_standards_1     String
  compliance_ethical_standards_2     String
  commitment_sustainable_practices   String
  agreement_terms                    String
  additional_information             String?
  specific_expectation_requirements  String?
}

type ProfileData {
  agent        Agent_Profile
  installer    Installer_Profile
  collaborator Collaborator_Profile
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  email             String         @unique
  firstname         String?
  lastname          String?
  emailVerified     Boolean?
  avatar            String?
  role              ROLE           @default(USER)
  invited           Boolean?
  config            Settings?
  prefix            PREFIX
  invite_id         String?
  invites           Invites[]
  gender            GENDER
  phone_number      String?
  hashedPassword    String
  createdAt         DateTime       @default(now())
  lastUpdatedAt     DateTime       @updatedAt
  account_status    ACCOUNT_STATUS @default(active)
  verification_link String?
  reset_link        ResetPassword?

  applications Application[]
  profile      Profile?
}

model Application {
  id                               String                          @id @default(auto()) @map("_id") @db.ObjectId
  application_id                   String                          @unique
  type                             String
  userId                           String                          @db.ObjectId
  personal_info                    PersonalInfo?
  company_info                     CompanyInfo?
  company_expenses                 CompanyExpenses?
  company_documentations           Documentations?
  company_solar_requirements       CompanySolarRequirements?
  employment                       Employment?
  housing_info                     HousingInfo?
  kyc_verification                 KYC?
  community_general_info           CommunityGeneralInfo?
  community_demographic_info       CommunityDemographicInfo?
  community_energy_requirements    CommunityEnergyRequirements?
  community_economic_info          CommunityEconomicInfo?
  community_infrastructure_info    CommunityInfrastructrueInfo?
  community_enviromental_info      CommunityEnviromentalInfo?
  community_technical_requirements CommunityTechnicalRequirements?
  community_regulatory_policy      CommunityRegulatoryPolicy?
  community_engagement_info        CommunityEngagement?
  community_finiacial_viability    CommunityFiniancialViability?
  community_project_timeline       CommunityProjectTimeline?
  community_partnership_info       CommunityPartnerships?
  community_additional_comments    CommunityAdditionalComments?
  editExpiry                       DateTime?
  approvedBy                       String?                         @db.ObjectId
  status                           APPLICATION_STATUS              @default(pending)
  createdAt                        DateTime                        @default(now())
  lastUpdatedAt                    DateTime                        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  solar_preference String?      @db.ObjectId
  solarSystem      SolarSystem? @relation(fields: [solar_preference], references: [id])
}

model NG_STATES {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  sId  String
  name String
}

model Admin {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String         @unique
  firstname      String?
  lastname       String?
  emailVerified  Boolean?
  avatar         String?
  messenger      MessengerAuth?
  permissions    Permission
  role           ROLE           @default(ADMIN)
  hashedPassword String
  createdAt      DateTime       @default(now())
  lastUpdatedAt  DateTime       @updatedAt
  account_status ACCOUNT_STATUS @default(active)
}

model ChatMember {
  id String @id @map("_id") @db.ObjectId

  firstname String
  lastname  String
  avatar    String?
  role      ROLE

  isAdmin Boolean @default(false)

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  chatIds String[] @db.ObjectId
  chats   Chat[]   @relation(fields: [chatIds], references: [id])

  messages Message[]
}

model Chat {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  numMembers Int

  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  groupName String?
  isGroup   Boolean?
  isSession Boolean?
  host      String?  @db.ObjectId

  sessionIds String[]      @db.ObjectId
  sessions   ChatSession[]

  memberIds String[]     @db.ObjectId
  members   ChatMember[] @relation(fields: [memberIds], references: [id])
}

model ChatSession {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status ChatSessionStatus

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  chatId String @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  endedAt   DateTime? @default(now())
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[]     @db.ObjectId
  seen    ChatMember[] @relation("Seen", fields: [seenIds], references: [id])

  senderId String     @db.ObjectId
  sender   ChatMember @relation(fields: [senderId], references: [id], onDelete: Cascade)

  chatSessionId String      @db.ObjectId
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  storage MessageStorageType? @default(db)
}

model Contact {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  logo String
}

model Appliance {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String
  min_watt Int
  max_watt Int
}

model SolarSystem {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  image      String
  equipments SolarEquipments
  capacity   Float
  unit       String            @default("kVA")
  tariff     SolarSystemTariff

  Application Application[]
}

model Profile {
  id     String      @id @default(auto()) @map("_id") @db.ObjectId
  data   ProfileData
  userId String      @unique @db.ObjectId
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}
