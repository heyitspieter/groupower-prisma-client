// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum APPLICATION_STATUS {
  pending
  approved
  declined
}

enum ROLE {
  USER
  ADMIN
  SUPER_ADMIN
  AGENT
  COLLABORATOR
}

enum ACCOUNT_STATUS {
  suspended
  active
  pending
}

enum WORK_STATUS {
  SELF_EMPLOYED
  EMPLOYEE
}

enum GENDER {
  Male
  Female
}

enum PREFIX {
  Mr
  Mrs
  Miss
  Professor
  Doctor
  Chief
  Pastor
}

enum MARITAL_STATUS {
  Single
  Married
  Widowed
  Divorced
}

enum MOUNT_TYPE {
  ROOF_MOUNT
  FLOOR_MOUNT
}

enum Actions {
  CREATE
  DELETE
  EDIT
  UPDATE
  LIST
  READ
}

enum APPLIANCES {
  microwave
  steam_iron
  television
  dish_washer
  refrigerator
  aircondition
  water_heater_system
  exterior_light_points
  interior_light_points
}

enum TwoFactorAuthChannel {
  Email
  SMS
}

type Bank_account {
  number String
  bank   String
  holder String
}

type Location {
  description String
  lat         Float
  lng         Float
}

type Country {
  flag   String
  label  String
  latlng Float[]
  region String
  value  String
}

type EmployerSupervisor {
  firstname     String
  lastname      String
  company_role  String
  middlename    String
  email_address String
  phone_number  String
}

type Employment {
  business_name        String?
  business_address     String?
  work_phone           String?
  business_duration    String?
  business_website     String?
  net_revenue          String?
  business_certificate String?

  employer_name       String?
  employer_address    String?
  employer_supervisor EmployerSupervisor?
  salary_account      Bank_account?
  time_at_employer    String?
  net_income          String?
  proof_of_salary     String?
  job_letter          String?

  employment_status WORK_STATUS?
}

type CompanyInfo {
  company_name          String
  company_role          String
  company_email_address String
  work_phone            String
  company_address       String
  country               Country
  city                  String
  state                 String
  zipCode               String
}

type Appliances {
  type  APPLIANCES
  count Int
}

type PersonalInfo {
  firstname       String
  lastname        String
  middlename      String
  gender          GENDER
  prefix          PREFIX
  marital_status  MARITAL_STATUS
  num_children    Int?
  email_address   String
  contact_address String
  country         Country
  city            String
  state           String
  zipCode         String
  phone_number    String
}

type HousingInfo {
  beds                String
  building_type       String
  electricity_cost    String
  num_residents       Int
  mount_type          MOUNT_TYPE
  solar_mount_address Location
  appliances          Appliances[]
}

type CompanyExpenses {
  govt_electricity_cost  String
  govt_electricity_hours String
  power_generation_cost  String
  power_generation_hours String
}

type KYC {
  verified               Boolean
  bvn_number             String
  kyc_verification_media String
}

type Documentations {
  tax_certificate      String
  business_reg_number  String
  business_certificate String
}

type Permission {
  applications Actions[]
  admins       Actions[]
  users        Actions[]
  agents       Actions[]
}

type TwoFactorAuth {
  enabled Boolean
  channel TwoFactorAuthChannel
}

type UserAuthConfig {
  two_factor_auth TwoFactorAuth
}

type Settings {
  auth UserAuthConfig
}

type ResetPassword {
  token     String
  expiresIn DateTime
}

type Invites {
  id String? @db.ObjectId
}

type Member {
  id   String @db.ObjectId
  role ROLE
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  email             String         @unique
  firstname         String?
  lastname          String?
  emailVerified     Boolean?
  avatar            String?
  role              ROLE           @default(USER)
  invited           Boolean?
  config            Settings?
  prefix            PREFIX
  invite_id         String?
  invites           Invites[]
  gender            GENDER
  phone_number      String?
  hashedPassword    String
  createdAt         DateTime       @default(now())
  lastUpdatedAt     DateTime       @updatedAt
  account_status    ACCOUNT_STATUS @default(active)
  verification_link String?
  reset_link        ResetPassword?

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  applications Application[]
}

model Application {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  application_id   String             @unique
  type             String
  personal_info    PersonalInfo
  userId           String             @db.ObjectId
  employment       Employment?
  company_info     CompanyInfo?
  housing_info     HousingInfo?
  company_expenses CompanyExpenses?
  kyc_verification KYC?
  documentations   Documentations?
  editExpiry       DateTime
  approvedBy       String?            @db.ObjectId
  status           APPLICATION_STATUS @default(pending)
  createdAt        DateTime           @default(now())
  lastUpdatedAt    DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NG_STATES {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  sId  String
  name String
}

model Admin {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String         @unique
  firstname      String?
  lastname       String?
  emailVerified  Boolean?
  avatar         String?
  permissions    Permission
  role           ROLE           @default(ADMIN)
  hashedPassword String
  createdAt      DateTime       @default(now())
  lastUpdatedAt  DateTime       @updatedAt
  account_status ACCOUNT_STATUS @default(active)

  messages Message[]
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  groupName     String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  memberIds String[] @db.ObjectId
  members   Member[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   Admin  @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
